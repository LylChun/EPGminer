[{"path":"https://lylchun.github.io/EPGminer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lylchun.github.io/EPGminer/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://lylchun.github.io/EPGminer/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://lylchun.github.io/EPGminer/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://lylchun.github.io/EPGminer/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"EPGminer Demo","text":"demo, show use EPGminer R package analysis insect EPG data. primary goal EPGminer advance analysis insect feeding behavior using EPG introducing computational tool. main utility EPGminer calculation frequency via Fourier Transform, calculation Relative Amplitude (voltage). demo take step step analysis EPG data using example dataset.","code":""},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"load-example-dataset","dir":"Articles","previous_headings":"Introduction","what":"1. Load Example Dataset","title":"EPGminer Demo","text":"First, dataset must read properly. EPGminer function read_epg can used read raw EPG data “txt” files manual annotation files extension “.ANA”.","code":"# insert dataset"},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"add-waveform-labels","dir":"Articles","previous_headings":"Introduction","what":"2. Add waveform labels","title":"EPGminer Demo","text":"calculate Frequency Relative Amplitude waveform, annotation file must combined raw data","code":"# example_epg_unlabeled and example_epg_ana from part 1 example_epg_labeled <- label_ana(example_epg_unlabeled, example_epg_ana)"},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"calculate-frequency-and-relative-amplitude","dir":"Articles","previous_headings":"Introduction","what":"3. Calculate Frequency and Relative Amplitude","title":"EPGminer Demo","text":"data properly labeled using annotation file, EPGminer functions wave_topfreq wave_volts can used calculate Frequency Relative Amplitude respectively.","code":"frequency <- wave_topfreq(example_epg_labeled) RA <- wave_volts(example_epg_labeled) head(frequency); head(RA)"},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"summarize-results-by-waveform","dir":"Articles","previous_headings":"Introduction","what":"4. Summarize results by waveform","title":"EPGminer Demo","text":"summarize results, take mean value waveform type.","code":"# group by waveform and take the mean summary_freq <- frequency %>%   group_by(waveform) %>%   summarise(waveform = waveform[1], frequency = mean(frequency), .groups = \"drop\") summary_ra <- RA %>%   group_by(waveform) %>%   summarise(waveform = waveform[1], relative_amplitude = mean(relative_amplitude),             .groups = \"drop\") knitr::kable(summary_freq, caption = \"Table of Mean Frequency by Waveform\",              align = \"c\") knitr::kable(summary_ra, caption = \"Table of Mean Relative Amplitude by Waveform\",              align = \"c\")"},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"visualize-data","dir":"Articles","previous_headings":"Introduction","what":"5. Visualize data","title":"EPGminer Demo","text":"exploration, data can also visualized. following three plots show: () boxpot frequencies waveform type, (ii) pie chart time spent waveform type (iii) pie chart showing number waveform type.","code":"plot_fbox(example_epg_labeled) plot_pie(example_epg_labeled, pietype = \"time\") plot_pie(example_epg_labeled, pietype = \"number\")"},{"path":"https://lylchun.github.io/EPGminer/articles/EPGminerDemo.html","id":"expected-output-and-run-time","dir":"Articles","previous_headings":"Introduction","what":"Expected Output and Run time","title":"EPGminer Demo","text":"Expected output step follows: Frequency Relative Amplitude calculated waveform instance returned table. frequency object table columns waveform frequency, RA object table columns waveform, mean volts, SD volts Relative Amplitude. Expected output two summary tables frequency Relative Amplitude grouped waveform respectively. one (mean) frequency (mean) Relative Amplitude waveform type. Three plots first boxplot frequencies last two pie charts time number respectively. Overall expected run time demo less 30 seconds, including data reading/processing steps 1 2.","code":""},{"path":"https://lylchun.github.io/EPGminer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elizabeth Chun. Author, maintainer.","code":""},{"path":"https://lylchun.github.io/EPGminer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chun E (2022). epgminer: Analysis EPG data. R package version 1.0.0, https://lylchun.github.io/EPGminer/.","code":"@Manual{,   title = {epgminer: Analysis of EPG data},   author = {Elizabeth Chun},   year = {2022},   note = {R package version 1.0.0},   url = {https://lylchun.github.io/EPGminer/}, }"},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"epgminer","dir":"","previous_headings":"","what":"Analysis of EPG data","title":"Analysis of EPG data","text":"Electrical Penetration Graph (EPG) technique used monitor insect feeding behavior. Studying voltage waveforms EPG data allows one analyze insect-host relationship gain insights makes suitable host. facilitate analysis EPG data, EPGminer contains various functions working voltage time series data well ANA annotation files manual annotation software. primary utility using EPGminer analysis ability calculate Frequency Relative Amplitude. Frequency calculated using Fourier Transform extract main constituent frequencies waveform. Relative amplitude measure voltage amplitude waveform. Another aspect EPGminer data visualization via plots. plotting functions format plot_x x denotes type plot. types plots currently supported : voltage time series, labeled time-series, Fourier transformed data, frequency boxplot, two types pie charts. accompanying Shiny app, available web version (https://epgdata.shinyapps.io/epgminer_app/) locally R, includes streamlined version package functionality focusing main calculations visuals. cite (DOI) please use: Elizabeth Chun. (2022). LylChun/EPGminer: EPGminer (v1.0.0). Zenodo.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"hardware","dir":"","previous_headings":"System requirements","what":"Hardware","title":"Analysis of EPG data","text":"EPGminer can run standard computer enough memory perform necessary operations. primarily tested computer 8 GB RAM amply sufficient.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"os","dir":"","previous_headings":"System requirements > Software","what":"OS","title":"Analysis of EPG data","text":"package developed primarily tested Windows 10 Version 20H2. also tested macOS Monterey Version 12.1.","code":""},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"dependencies","dir":"","previous_headings":"System requirements > Software","what":"Dependencies","title":"Analysis of EPG data","text":"R package developed using R version 4.1.0. depends R (>=4.0.0) well specific package Imports listed DESCRIPTION file.","code":""},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"epgminer-application","dir":"","previous_headings":"System requirements > Software","what":"EPGminer Application","title":"Analysis of EPG data","text":"streamlined version EPGminer available Shiny application. EPGminer App web version may launched via user’s web browser installation software dependencies required. app tested following browsers: Chrome Version 99.0.4844.51 Edge Version 99.0.1150.39 Safari Version 15.2 Note due server limitations, web version limited memory used datasets exceed 100mb . EPGminer app local version must installed R package System Requirements noted .","code":""},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"installation-guide","dir":"","previous_headings":"","what":"Installation guide","title":"Analysis of EPG data","text":"use EPGminer package, users must R installed computer. may accomplished going https://cran.r-project.org/, downloading, installing appropriate version R given operating system. Installation R take around 1 minute. R properly installed, EPGminer package may installed GitHub follows.","code":""},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"install-from-github","dir":"","previous_headings":"Installation guide","what":"Install from GitHub","title":"Analysis of EPG data","text":"EPGminer package can installed GitHub using devtools via following code R. Installation take around 30 seconds. install package without vignettes, set build_vignettes = FALSE (install time faster, however means vignettes referenced “Demo” “Instructions use” installed).","code":"if (!require(devtools)){   install.packages(\"devtools\") } devtools::install_github(\"LylChun/EPGminer\", build_vignettes = TRUE)"},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Analysis of EPG data","text":"demo EPGminer instructions, expected output, expected run time, please see “EPGminerDemo” vignette:","code":"vignette(\"EPGminerDemo\")"},{"path":"https://lylchun.github.io/EPGminer/index.html","id":"instructions-for-use","dir":"","previous_headings":"Demo","what":"Instructions for use","title":"Analysis of EPG data","text":"Use software EPG data analysis involves data reading/processing, labeling, calculation metrics. example script showing used EPGminer data, please see “EPGminerReprex” vignette:","code":"vignette(\"EPGminerReprex\")"},{"path":"https://lylchun.github.io/EPGminer/reference/epgminer_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the EPGminer app (shiny) — epgminer_app","title":"Run the EPGminer app (shiny) — epgminer_app","text":"Run EPGminer app (shiny)","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/epgminer_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the EPGminer app (shiny) — epgminer_app","text":"","code":"epgminer_app()"},{"path":"https://lylchun.github.io/EPGminer/reference/label_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Use ANA file to label raw data — label_ana","title":"Use ANA file to label raw data — label_ana","text":"function label_ana combines raw data ANA annotation together return labeled dataframe.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/label_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use ANA file to label raw data — label_ana","text":"","code":"label_ana(data, ana)"},{"path":"https://lylchun.github.io/EPGminer/reference/label_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use ANA file to label raw data — label_ana","text":"data Dataframe containing columns time volts ana dataframe ANA file.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/label_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use ANA file to label raw data — label_ana","text":"tibble object three rows returned: time, volts, waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/label_ana.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use ANA file to label raw data — label_ana","text":"raw data ana must dataset, although names objects need match way. following code number character title conversion followed: 1 = non-probing 2 = C 4 = E1 5 = E2 7 = G 8 = pd 9 = pd1 10 = pd2 99 = end ANA labels come exact code matching, labeling incorrect.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/mainfreqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the main frequencies in a sample using the Fast Fourier Transform — mainfreqs","title":"Find the main frequencies in a sample using the Fast Fourier Transform — mainfreqs","text":"function mainfreqs finds main frequencies voltage time- series data using Fast Fourier Transform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/mainfreqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the main frequencies in a sample using the Fast Fourier Transform — mainfreqs","text":"","code":"mainfreqs(data, end = sample_rate/2, pre_fft = FALSE, window = TRUE, filter = 0.25, sample_rate = 100)"},{"path":"https://lylchun.github.io/EPGminer/reference/mainfreqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the main frequencies in a sample using the Fast Fourier Transform — mainfreqs","text":"data Either voltage time series dataframe dataframe Fourier transformed data columns frequency amplitude. latter, change pre_fft TRUE. end Numeric indicating number frequencies display, e.g. end = 10 top 10 frequencies. Default (half sample_rate) pre_fft TRUE/FALSE indicating whether data fed Fourier Transformed, window Default true window data transforming. filter High pass filter indicating threshold frequency kept, filtered sample_rate frequency collection Hz. Default 100 Hz","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/mainfreqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the main frequencies in a sample using the Fast Fourier Transform — mainfreqs","text":"dataframe containing main frequencies 2 columns returned: frequency amplitude.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/mainfreqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the main frequencies in a sample using the Fast Fourier Transform — mainfreqs","text":"Main frequencies determined largest amplitude. Frequencies aggregated highest integer bin kept compared - e.g. data 5.1 Hz, 5.2 Hz, largest kept 5.x Hz entry. Therefore multiple main frequencies bin, largest one kept others discarded.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://lylchun.github.io/EPGminer/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Box plot of Frequencies — plot_fbox","title":"Box plot of Frequencies — plot_fbox","text":"function plot_fbox shows frequencies present dataset plotted box plot waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box plot of Frequencies — plot_fbox","text":"","code":"plot_fbox(data, waveforms = c(\"non-probing\", \"C\", \"E1\", \"E2\", \"G\", \"pd1\", \"pd2\", \"pd\"))"},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box plot of Frequencies — plot_fbox","text":"data dataframe containing three columns: time, volts, waveform. waveforms list waveforms include plot. Default .","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box plot of Frequencies — plot_fbox","text":"boxplot frequencies waveform. none specified waveforms present data, function return NULL.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box plot of Frequencies — plot_fbox","text":"function plot_fbox designed allow one see frequencies variability frequencies waveforms dataset.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fft.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of amplitude vs frequency for transformed voltage data — plot_fft","title":"Plot of amplitude vs frequency for transformed voltage data — plot_fft","text":"function plot_fft allows one visualize results Fourier Transform check peaks - main constituent frequencies.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of amplitude vs frequency for transformed voltage data — plot_fft","text":"","code":"plot_fft(data, end = NULL, include_dc = FALSE, pre_fft = FALSE, window = TRUE, filter = 0.25, sample_rate = 100)"},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of amplitude vs frequency for transformed voltage data — plot_fft","text":"data Either voltage time series dataframe dataframe Fourier transformed data columns frequency amplitude. latter, change pre_fft TRUE. end Default NULL plot data. Otherwise, insert numeric value corresponding maximum frequency like plot. affect frequency values , merely selects portion graph view. include_dc Default true, include DC component (amplitude 0 Hz) pre_fft TRUE/FALSE indicating whether data fed Fourier Transformed, window Default true window data transforming. filter High pass filter indicating threshold frequency kept, filtered sample_rate frequency collection Hz. Default 100 Hz","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of amplitude vs frequency for transformed voltage data — plot_fft","text":"plot showing amplitude vs frequency Fourier Transformed data.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_fft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of amplitude vs frequency for transformed voltage data — plot_fft","text":"window = TRUE chosen, Hann (Hanning) window applied data transform. Additionally, window = TRUE select 2^10 = 1024 point data.frame center data order get 'center cut' data avoid irregularities around edges.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/plot_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Pie chart of labeled EPG data — plot_pie","title":"Pie chart of labeled EPG data — plot_pie","text":"function plot_pie allows one visualize EPG waveforms pie chart format.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pie chart of labeled EPG data — plot_pie","text":"","code":"plot_pie(data, pietype = c(\"time\", \"number\"), waveforms = c(\"non-probing\", \"C\", \"E1\", \"E2\", \"G\", \"pd1\", \"pd2\", \"pd\"))"},{"path":"https://lylchun.github.io/EPGminer/reference/plot_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pie chart of labeled EPG data — plot_pie","text":"data dataframe containing three columns: time, volts, waveform. pietype Select type pie chart display. Default time - pie chart showing percent time spent waveform displayed. \"number\" selected, number instances waveform type displayed - e.g. 20 distinct waveforms, 5 type C, C 5/20 25%. avoid double counting pds, category pd (.e. pd1 pd2) consists times pd, classified subforms, appears. waveforms list waveforms include plot. Default .","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_pie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pie chart of labeled EPG data — plot_pie","text":"plotly pie chart EPG waveforms dataset. none specified waveforms present data, function return NULL.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_pie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pie chart of labeled EPG data — plot_pie","text":"function plot_pie designed help visualize EPG waveform data.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/plot_vts.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series plot of voltage — plot_vts","title":"Time series plot of voltage — plot_vts","text":"function plot_vts plots voltage vs time.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_vts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series plot of voltage — plot_vts","text":"","code":"plot_vts(data, aggregate = TRUE, interval = 100)"},{"path":"https://lylchun.github.io/EPGminer/reference/plot_vts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series plot of voltage — plot_vts","text":"data Dataframe containing columns time volts aggregate TRUE/FALSE indicated whether aggregate data reduce number points plotting mean set interval. interval Integer indicating number points aggregate together aggregate = TRUE.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_vts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series plot of voltage — plot_vts","text":"voltage time series plot.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_vts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series plot of voltage — plot_vts","text":"large amount data fed , recommended aggregate plotting excess points time intensive.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_wave.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of EPG data colored by waveform — plot_wave","title":"Plot of EPG data colored by waveform — plot_wave","text":"function plot_wave plots EPG data colored waveform labels.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_wave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of EPG data colored by waveform — plot_wave","text":"","code":"plot_wave(data, facetted = FALSE, aggregate = c(\"all\", \"smart\", \"none\"), interval = 100, smart_int = 10)"},{"path":"https://lylchun.github.io/EPGminer/reference/plot_wave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of EPG data colored by waveform — plot_wave","text":"data dataframe containing three columns: time, volts, waveform. facetted TRUE/FALSE indicating whether plot waveform individually. aggregate Optional aggregation parameter, must one \"\", \"smart\", \"none\". Defaults - data aggregated chosen interval. \"smart\" chosen, certain regions aggregated strongly interval period, e.g. non-probing areas. recommended speed plotting without losing much resolution important waveform areas. Lastly, option none results aggregation performed - data plotted. interval Integer indicating number points aggregate together aggregate = TRUE. smart_int aggregate = \"smart\", choose strongly aggregate non-pd sections data. Default 10 balance speed resolution.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_wave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of EPG data colored by waveform — plot_wave","text":"plot EPG data colored waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/plot_wave.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of EPG data colored by waveform — plot_wave","text":"function plot_wave relies specific waveform labels follows: , C, E1, E2, g, pd1, pd2, pd, NA non-probing non-feeding activity. labels must characters case sensitive.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/read_epg.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in EPG data files — read_epg","title":"Read in EPG data files — read_epg","text":"function read_epg data reads EPG data.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/read_epg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in EPG data files — read_epg","text":"","code":"read_epg(data, extension = c(\"txt\", \"ANA\", \"csv\"))"},{"path":"https://lylchun.github.io/EPGminer/reference/read_epg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in EPG data files — read_epg","text":"data read_x functions, insert file path data file . multiple files, must read one time using lapply. extension file extension raw data read. options txt, ANA, csv. extension indicated, txt chosen default.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/read_epg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in EPG data files — read_epg","text":"tibble object corresponding type data input returned.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/read_epg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in EPG data files — read_epg","text":"Three file formats supported: raw data text files format time;volts, ANA annotation files columns order waveform, time, volts (need named), lastly csv files combined raw data annotations columns labeled time, volts, waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/single_fft.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the frequency and amplitude using the Fast Fourier Transform — single_fft","title":"Extract the frequency and amplitude using the Fast Fourier Transform — single_fft","text":"function, single_fft, runs R implementation Fast Fourier Transform, fft, returns dataframe containing single- sided FFT columns frequency amplitude.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/single_fft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the frequency and amplitude using the Fast Fourier Transform — single_fft","text":"","code":"single_fft(data, window = TRUE, include_dc = TRUE, filter = 0.25, sample_rate = 100)"},{"path":"https://lylchun.github.io/EPGminer/reference/single_fft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the frequency and amplitude using the Fast Fourier Transform — single_fft","text":"data Dataframe containing columns time volts window Default true window data transforming. include_dc Default true, include DC component (amplitude 0 Hz) filter High pass filter indicating threshold frequency kept, filtered sample_rate frequency collection Hz. Default 100 Hz","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/single_fft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the frequency and amplitude using the Fast Fourier Transform — single_fft","text":"tibble object two columns: Frequency Amplitude. single-sided, select Nyquist (sample_rate/2)","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/single_fft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the frequency and amplitude using the Fast Fourier Transform — single_fft","text":"window = TRUE chosen, Hann (Hanning) window applied data transform. Additionally, window = TRUE select 2^10 = 1024 point data.frame center data order get 'center cut' data avoid irregularities around edges.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/topfreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the single main frequency for a voltage time series — topfreq","title":"Calculate the single main frequency for a voltage time series — topfreq","text":"function topfreq calculates single main frequency voltage time series data using Fast Fourier Transform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/topfreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the single main frequency for a voltage time series — topfreq","text":"","code":"topfreq(data, window = TRUE, filter = 0.25, pre_fft = FALSE)"},{"path":"https://lylchun.github.io/EPGminer/reference/topfreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the single main frequency for a voltage time series — topfreq","text":"data Either voltage time series dataframe dataframe Fourier transformed data columns frequency amplitude. latter, change pre_fft TRUE. window Default true window data transforming. filter High pass filter indicating threshold frequency kept, filtered pre_fft TRUE/FALSE indicating whether data fed Fourier Transformed,","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/topfreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the single main frequency for a voltage time series — topfreq","text":"single main frequency amplitude returned tibble object.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/topfreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the single main frequency for a voltage time series — topfreq","text":"main frequency defined largest amplitude.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/wave_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the duration for each waveform instance — wave_duration","title":"Calculate the duration for each waveform instance — wave_duration","text":"function wave_duration calculates duration waveform instance labeled data.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the duration for each waveform instance — wave_duration","text":"","code":"wave_duration(data)"},{"path":"https://lylchun.github.io/EPGminer/reference/wave_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the duration for each waveform instance — wave_duration","text":"data dataframe containing three columns: time, volts, waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the duration for each waveform instance — wave_duration","text":"tibble object containing row per waveform instance two columns, waveform duration, returned.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the duration for each waveform instance — wave_duration","text":"Labeled data grouped waveform instance duration calculated. overall feeding duration displayed top row \"Feeding\" simplicity. Duration reported seconds. waveform type 'pd' without splitting subforms calculated separately. result, pd calculations appear end table. subforms, pd1 pd2, appear sequence.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/wave_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a specified waveform from a labeled dataset — wave_extract","title":"Extract a specified waveform from a labeled dataset — wave_extract","text":"function wave_extract subsets data returns specified waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a specified waveform from a labeled dataset — wave_extract","text":"","code":"wave_extract(data, wave, number = 1)"},{"path":"https://lylchun.github.io/EPGminer/reference/wave_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a specified waveform from a labeled dataset — wave_extract","text":"data dataframe containing three columns: time, volts, waveform. wave Desired type waveform, e.g. pd1 number Integer denoting instance specified waveform type select - e.g. number = 1 select first instance waveform type specified wave parameter.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a specified waveform from a labeled dataset — wave_extract","text":"list containing 2 entries returned: entry one tibble time, volts, waveform returned containing just specified waveform instance. List entry 2 number/count type waveform - e.g. wave = \"pd2\" 12 pd2 instances dataset, entry return 12.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a specified waveform from a labeled dataset — wave_extract","text":"wave parameter input exactly match waveform label data, function work.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/wave_occurrence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and Extract the number of occurrences for each waveform type — wave_occurrence","title":"Calculate and Extract the number of occurrences for each waveform type — wave_occurrence","text":"function wave_occurrence calculates number waveform type.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_occurrence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and Extract the number of occurrences for each waveform type — wave_occurrence","text":"","code":"wave_occurrence(data)"},{"path":"https://lylchun.github.io/EPGminer/reference/wave_occurrence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and Extract the number of occurrences for each waveform type — wave_occurrence","text":"data dataframe containing three columns: time, volts, waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_occurrence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and Extract the number of occurrences for each waveform type — wave_occurrence","text":"tibble object containing row per waveform instance two columns, waveform occurrence, returned.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_occurrence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and Extract the number of occurrences for each waveform type — wave_occurrence","text":"Labeled data grouped waveform instance unique instances waveform type counted.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/wave_topfreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and Extract the top frequency for each waveform instance — wave_topfreq","title":"Calculate and Extract the top frequency for each waveform instance — wave_topfreq","text":"function wave_topfreq calculates main/top frequency waveform instance labeled data.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_topfreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and Extract the top frequency for each waveform instance — wave_topfreq","text":"","code":"wave_topfreq(data)"},{"path":"https://lylchun.github.io/EPGminer/reference/wave_topfreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and Extract the top frequency for each waveform instance — wave_topfreq","text":"data dataframe containing three columns: time, volts, waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_topfreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and Extract the top frequency for each waveform instance — wave_topfreq","text":"tibble object containing row per waveform instance two columns, waveform frequency, returned.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_topfreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and Extract the top frequency for each waveform instance — wave_topfreq","text":"Labeled data grouped waveform instance Fourier transform used extract top frequency via epgminer function topfreq. Frequency reported Hz. waveform type 'pd' without splitting subforms calculated separately. result, pd calculations appear end table. subforms, pd1 pd2, appear sequence.","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/reference/wave_volts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate voltage metrics for each waveform — wave_volts","title":"Calculate voltage metrics for each waveform — wave_volts","text":"function wave_volts calculates voltage metrics waveform instance","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_volts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate voltage metrics for each waveform — wave_volts","text":"","code":"wave_volts(data)"},{"path":"https://lylchun.github.io/EPGminer/reference/wave_volts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate voltage metrics for each waveform — wave_volts","text":"data dataframe containing three columns: time, volts, waveform.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_volts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate voltage metrics for each waveform — wave_volts","text":"tibble object containing row per waveform instance four columns returned: waveform, mean_volts, sd_volts, relative_amplitude.","code":""},{"path":"https://lylchun.github.io/EPGminer/reference/wave_volts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate voltage metrics for each waveform — wave_volts","text":"Labeled data grouped waveform instance following three voltage metrics returned: mean, SD, relative amplitude. SD mathematical SD volts. Mean first corrected subtracting starting voltage, mean (adjusted) voltage returned. waveform type 'pd' without splitting subforms calculated separately. result, pd calculations appear end table. subforms, pd1 pd2, appear sequence. Relative amplitude percent calculated following formula: Relative amplitude = |(mean waveform - mean nonprobing)|x100/5","code":""},{"path":[]},{"path":"https://lylchun.github.io/EPGminer/news/index.html","id":"epgminer-100","dir":"Changelog","previous_headings":"","what":"EPGminer 1.0.0","title":"EPGminer 1.0.0","text":"Stable cleaned version release: 1. Streamline, focus frequency relative amplitude 2. Removes deprecated pda/pdb notation 0.0.1 4. Add GitHub Action check","code":""},{"path":"https://lylchun.github.io/EPGminer/news/index.html","id":"epgminer-001","dir":"Changelog","previous_headings":"","what":"EPGminer 0.0.1","title":"EPGminer 0.0.1","text":"First package version","code":""}]
